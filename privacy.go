package main

/*
#cgo pkg-config: webkit2gtk-4.0
#include <webkit2/webkit2.h>

// Configurar privacidade do WebView
static void configure_webview_privacy(WebKitWebView* webview) {
    WebKitWebContext* context = webkit_web_view_get_context(webview);
    WebKitCookieManager* cookie_manager = webkit_web_context_get_cookie_manager(context);
    
    // Pol√≠tica de cookies: Bloquear third-party
    webkit_cookie_manager_set_accept_policy(
        cookie_manager,
        WEBKIT_COOKIE_POLICY_ACCEPT_NO_THIRD_PARTY
    );
    
    // Configura√ß√µes de privacidade
    WebKitSettings* settings = webkit_web_view_get_settings(webview);
    
    // Desabilitar WebGL (fingerprinting)
    webkit_settings_set_enable_webgl(settings, FALSE);
    
    // Desabilitar WebAudio (fingerprinting)
    webkit_settings_set_enable_webaudio(settings, FALSE);
    
    // Desabilitar acesso offline (cache)
    webkit_settings_set_enable_offline_web_application_cache(settings, FALSE);
}
*/
import "C"
import (
	"log"
)

// PrivacyConfig representa configura√ß√µes de privacidade
type PrivacyConfig struct {
	BlockThirdPartyCookies bool
	BlockGeolocation       bool
	BlockNotifications     bool
	BlockMediaAccess       bool
	BlockWebGL             bool
	BlockWebAudio          bool
	DNT                    bool // Do Not Track
}

// DefaultPrivacyConfig retorna configura√ß√£o padr√£o (m√°xima privacidade)
func DefaultPrivacyConfig() *PrivacyConfig {
	return &PrivacyConfig{
		BlockThirdPartyCookies: true,
		BlockGeolocation:       true,
		BlockNotifications:     false, // Permitir notifica√ß√µes (usu√°rio pode controlar por site)
		BlockMediaAccess:       true,
		BlockWebGL:             true,
		BlockWebAudio:          true,
		DNT:                    true,
	}
}

// ApplyPrivacyConfig aplica configura√ß√µes de privacidade ao WebView
func ApplyPrivacyConfig(webView *WebView, config *PrivacyConfig) {
	log.Println("üïµÔ∏è  Aplicando configura√ß√µes de privacidade...")
	
	// Aplicar configura√ß√µes via CGO
	C.configure_webview_privacy(webView.cWebView)
	
	log.Println("‚úÖ Privacidade configurada:")
	log.Printf("   - Third-party cookies: %v", !config.BlockThirdPartyCookies)
	log.Printf("   - Geolocaliza√ß√£o: %v", !config.BlockGeolocation)
	log.Printf("   - Notifica√ß√µes: %v", !config.BlockNotifications)
	log.Printf("   - M√≠dia (c√¢mera/mic): %v", !config.BlockMediaAccess)
	log.Printf("   - WebGL: %v", !config.BlockWebGL)
	log.Printf("   - WebAudio: %v", !config.BlockWebAudio)
	log.Printf("   - Do Not Track: %v", config.DNT)
}

// PrivacyManager gerencia privacidade do browser
type PrivacyManager struct {
	config *PrivacyConfig
}

// NewPrivacyManager cria um novo gerenciador de privacidade
func NewPrivacyManager() *PrivacyManager {
	return &PrivacyManager{
		config: DefaultPrivacyConfig(),
	}
}

// GetConfig retorna configura√ß√£o atual
func (pm *PrivacyManager) GetConfig() *PrivacyConfig {
	return pm.config
}

// LogPrivacyInfo loga informa√ß√µes de privacidade
func (pm *PrivacyManager) LogPrivacyInfo() {
	log.Println("üïµÔ∏è  Bagus Browser - Configura√ß√µes de Privacidade:")
	log.Println("   ‚úÖ Zero telemetria")
	log.Println("   ‚úÖ Sem analytics")
	log.Println("   ‚úÖ Sem crash reports")
	log.Println("   ‚úÖ Sem rastreamento")
	log.Println("   ‚úÖ Third-party cookies bloqueados")
	log.Println("   ‚úÖ Geolocaliza√ß√£o bloqueada")
	log.Println("   ‚úÖ Notifica√ß√µes habilitadas (controladas por site)")
	log.Println("   ‚úÖ Acesso a m√≠dia bloqueado")
	log.Println("   ‚úÖ WebGL bloqueado (anti-fingerprinting)")
	log.Println("   ‚úÖ WebAudio bloqueado (anti-fingerprinting)")
	log.Println("   ‚úÖ Do Not Track habilitado")
	log.Println("   ‚úÖ DuckDuckGo como motor de busca padr√£o")
}

#!/bin/bash
#
# 🌐 Bagus Browser - Script Master Unificado
# Controla: Versionamento, Build, Instalação, Publicação
# Versão: 4.6.3
# Autor: Bagus Browser Team
#

set -e

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configurações
APP_NAME="bagus-browser"
CURRENT_VERSION="v4.6.3"
BUILD_DIR="build"
DIST_DIR="dist"

# Banner
show_banner() {
    echo -e "${CYAN}"
    echo "╔════════════════════════════════════════╗"
    echo "║     🌐 Bagus Browser - Master CLI     ║"
    echo "║        Versão: ${CURRENT_VERSION}              ║"
    echo "╚════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Ajuda
show_help() {
    show_banner
    echo -e "${YELLOW}Uso:${NC} ./bagus <comando> [opções]"
    echo ""
    echo -e "${CYAN}📦 Build & Instalação:${NC}"
    echo "  build              - Compilar e empacotar (.deb + .tar.gz)"
    echo "  install            - Build + Instalar localmente"
    echo "  clean              - Limpar builds e temporários"
    echo ""
    echo -e "${CYAN}🚀 Versionamento & Release:${NC}"
    echo "  version            - Mostrar versão atual"
    echo "  release <X.Y.Z>    - Criar release completa (RECOMENDADO)"
    echo "                       Faz: version + build + tag + commit + push"
    echo ""
    echo -e "${CYAN}📤 Publicação:${NC}"
    echo "  publish            - Publicar release no GitHub (via gh CLI)"
    echo "  publish-auto       - Mesmo que publish"
    echo ""
    echo -e "${CYAN}🧪 Desenvolvimento:${NC}"
    echo "  test               - Testar compilação"
    echo "  run                - Compilar e executar"
    echo "  dev                - Modo desenvolvimento (recompila ao salvar)"
    echo ""
    echo -e "${CYAN}📊 Informações:${NC}"
    echo "  status             - Status do projeto"
    echo "  changelog          - Ver changelog"
    echo "  help               - Mostrar esta ajuda"
    echo ""
    echo -e "${YELLOW}Exemplos:${NC}"
    echo "  ./bagus build                    # Apenas compilar"
    echo "  ./bagus install                  # Compilar e instalar"
    echo "  ./bagus release 4.5.1            # Release completa"
    echo "  ./bagus publish                  # Publicar no GitHub"
    echo ""
}

# Verificar dependências
check_dependencies() {
    local missing=0
    
    if ! command -v go &> /dev/null; then
        echo -e "${RED}❌ Go não encontrado${NC}"
        missing=1
    fi
    
    if ! pkg-config --exists gtk+-3.0; then
        echo -e "${RED}❌ GTK3 não encontrado${NC}"
        missing=1
    fi
    
    if ! pkg-config --exists webkit2gtk-4.0; then
        echo -e "${RED}❌ WebKit2GTK não encontrado${NC}"
        missing=1
    fi
    
    if [ $missing -eq 1 ]; then
        echo ""
        echo -e "${YELLOW}Instale as dependências:${NC}"
        echo "  sudo apt-get install golang-go libgtk-3-dev libwebkit2gtk-4.0-dev"
        exit 1
    fi
}

# Build
cmd_build() {
    echo -e "${BLUE}🔨 Compilando Bagus Browser...${NC}"
    check_dependencies
    
    # Limpar
    rm -rf ${BUILD_DIR} ${DIST_DIR}
    mkdir -p ${BUILD_DIR} ${DIST_DIR}
    
    # Compilar
    echo -e "${YELLOW}📝 Compilando binário...${NC}"
    go build -ldflags="-s -w" -o ${BUILD_DIR}/${APP_NAME} .
    
    if [ $? -eq 0 ]; then
        SIZE=$(du -h ${BUILD_DIR}/${APP_NAME} | cut -f1)
        echo -e "${GREEN}✅ Compilação OK (${SIZE})${NC}"
    else
        echo -e "${RED}❌ Erro na compilação${NC}"
        exit 1
    fi
    
    # Criar .desktop
    echo -e "${YELLOW}📝 Criando .desktop...${NC}"
    cat > ${BUILD_DIR}/${APP_NAME}.desktop <<EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Bagus Browser
GenericName=Web Browser
Comment=Browser minimalista, seguro e privado
Exec=${APP_NAME} %u
Icon=${APP_NAME}
Terminal=false
Categories=Network;WebBrowser;
Keywords=browser;web;internet;navegador;
MimeType=text/html;text/xml;application/xhtml+xml;x-scheme-handler/http;x-scheme-handler/https;
StartupNotify=true
StartupWMClass=bagus-browser
Actions=NewWindow;

[Desktop Action NewWindow]
Name=Nova Janela
Exec=${APP_NAME}
EOF
    
    # Empacotar .deb
    echo -e "${YELLOW}📦 Criando pacote .deb...${NC}"
    
    DEB_DIR="${BUILD_DIR}/deb"
    mkdir -p ${DEB_DIR}/DEBIAN
    mkdir -p ${DEB_DIR}/usr/bin
    mkdir -p ${DEB_DIR}/usr/share/applications
    mkdir -p ${DEB_DIR}/usr/share/icons/hicolor/48x48/apps
    mkdir -p ${DEB_DIR}/usr/share/icons/hicolor/128x128/apps
    
    # Copiar arquivos
    cp ${BUILD_DIR}/${APP_NAME} ${DEB_DIR}/usr/bin/
    chmod +x ${DEB_DIR}/usr/bin/${APP_NAME}
    cp ${BUILD_DIR}/${APP_NAME}.desktop ${DEB_DIR}/usr/share/applications/
    
    # Copiar ícones
    if [ -f "assets/icons/bagus-browser-48.png" ]; then
        cp assets/icons/bagus-browser-48.png ${DEB_DIR}/usr/share/icons/hicolor/48x48/apps/${APP_NAME}.png
    fi
    if [ -f "assets/icons/bagus-browser-128.png" ]; then
        cp assets/icons/bagus-browser-128.png ${DEB_DIR}/usr/share/icons/hicolor/128x128/apps/${APP_NAME}.png
    fi
    
    # Control file
    cat > ${DEB_DIR}/DEBIAN/control <<EOF
Package: bagus-browser
Version: ${CURRENT_VERSION#v}
Section: web
Priority: optional
Architecture: amd64
Depends: libgtk-3-0, libwebkit2gtk-4.0-37
Maintainer: Bagus Browser Team
Description: Browser minimalista, seguro e privado
 Bagus Browser é um navegador web focado em privacidade,
 segurança e simplicidade. Zero telemetria, zero rastreamento.
EOF
    
    # Postinst script
    cat > ${DEB_DIR}/DEBIAN/postinst <<'EOF'
#!/bin/bash
echo "🔧 Configurando Bagus Browser..."
update-icon-caches /usr/share/icons/hicolor/ 2>/dev/null || true
update-desktop-database 2>/dev/null || true
echo "✅ Bagus Browser instalado!"
EOF
    chmod +x ${DEB_DIR}/DEBIAN/postinst
    
    # Construir .deb
    dpkg-deb --build ${DEB_DIR} ${DIST_DIR}/${APP_NAME}_${CURRENT_VERSION}_amd64.deb
    
    echo -e "${GREEN}✅ Pacote .deb criado${NC}"
    
    # Criar tarball
    echo -e "${YELLOW}📦 Criando tarball...${NC}"
    tar -czf ${DIST_DIR}/${APP_NAME}_${CURRENT_VERSION}_linux_amd64.tar.gz \
        -C ${BUILD_DIR} ${APP_NAME} ${APP_NAME}.desktop
    
    echo -e "${GREEN}✅ Tarball criado${NC}"
    
    # Checksums
    echo -e "${YELLOW}🔐 Gerando checksums...${NC}"
    cd ${DIST_DIR}
    sha256sum *.deb *.tar.gz > SHA256SUMS
    cd ..
    
    echo ""
    echo -e "${GREEN}╔════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║        ✅ Build Completo!              ║${NC}"
    echo -e "${GREEN}╚════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${CYAN}📦 Pacotes criados:${NC}"
    ls -lh ${DIST_DIR}/
    echo ""
}

# Instalar
cmd_install() {
    if [ ! -f "${DIST_DIR}/${APP_NAME}_${CURRENT_VERSION}_amd64.deb" ]; then
        echo -e "${YELLOW}📦 Pacote não encontrado, compilando...${NC}"
        cmd_build
    fi
    
    echo -e "${BLUE}📥 Instalando Bagus Browser...${NC}"
    sudo dpkg -i ${DIST_DIR}/${APP_NAME}_${CURRENT_VERSION}_amd64.deb || sudo apt-get install -f -y
    
    echo ""
    echo -e "${GREEN}✅ Instalado com sucesso!${NC}"
    echo ""
    echo -e "${CYAN}Como executar:${NC}"
    echo "  • Terminal: bagus-browser"
    echo "  • Menu: Aplicações → Internet → Bagus Browser"
    echo ""
}

# Limpar
cmd_clean() {
    echo -e "${YELLOW}🗑️  Limpando...${NC}"
    rm -rf ${BUILD_DIR}/ ${DIST_DIR}/
    rm -f ${APP_NAME} *.log
    rm -rf scripts/build/ scripts/dist/
    echo -e "${GREEN}✅ Limpo!${NC}"
}

# Versão
cmd_version() {
    echo -e "${CYAN}Versão atual:${NC} ${CURRENT_VERSION}"
    
    # Verificar se há commits não taggeados
    if git describe --exact-match HEAD 2>/dev/null; then
        echo -e "${GREEN}✅ Commit atual está taggeado${NC}"
    else
        echo -e "${YELLOW}⚠️  Há commits não taggeados${NC}"
    fi
}

# Release
cmd_release() {
    local NEW_VERSION=$1
    
    if [ -z "$NEW_VERSION" ]; then
        echo -e "${RED}❌ Erro: Especifique a versão${NC}"
        echo "Uso: ./bagus release 4.5.1"
        exit 1
    fi
    
    # Adicionar v se não tiver
    if [[ ! $NEW_VERSION =~ ^v ]]; then
        NEW_VERSION="v${NEW_VERSION}"
    fi
    
    echo -e "${PURPLE}🚀 Criando release ${NEW_VERSION}...${NC}"
    echo ""
    
    # Verificar se há mudanças não commitadas
    if ! git diff-index --quiet HEAD --; then
        echo -e "${YELLOW}⚠️  Há mudanças não commitadas${NC}"
        echo -e "${YELLOW}Commitando mudanças...${NC}"
        git add -A
        git commit -m "🔧 Preparar release ${NEW_VERSION}"
    fi
    
    # Atualizar versão no script
    sed -i "s/^CURRENT_VERSION=.*/CURRENT_VERSION=\"${NEW_VERSION}\"/" bagus
    sed -i "s/^# Versão: .*/# Versão: ${NEW_VERSION#v}/" bagus
    
    # Build
    CURRENT_VERSION=$NEW_VERSION
    cmd_build
    
    # Commit da versão
    git add bagus
    git commit -m "🔖 Bump version to ${NEW_VERSION}" || true
    
    # Criar tag
    echo -e "${YELLOW}🏷️  Criando tag ${NEW_VERSION}...${NC}"
    git tag -a ${NEW_VERSION} -m "Release ${NEW_VERSION}"
    
    # Push
    echo -e "${YELLOW}📤 Fazendo push...${NC}"
    git push origin main
    git push origin ${NEW_VERSION}
    
    echo ""
    echo -e "${GREEN}╔════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║     ✅ Release ${NEW_VERSION} Criada!        ║${NC}"
    echo -e "${GREEN}╚════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${CYAN}Próximos passos:${NC}"
    echo "  1. ./bagus publish-auto    # Publicar no GitHub"
    echo "  2. Ou publicar manualmente em:"
    echo "     https://github.com/peder1981/bagus-browser-go/releases"
    echo ""
}

# Publicar
cmd_publish() {
    echo -e "${BLUE}📤 Publicando no GitHub...${NC}"
    echo ""
    
    # Verificar gh CLI
    if ! command -v gh &> /dev/null; then
        echo -e "${RED}❌ GitHub CLI (gh) não encontrado${NC}"
        echo ""
        echo "Instale com:"
        echo "  sudo apt install gh"
        echo ""
        echo "Depois autentique:"
        echo "  gh auth login"
        exit 1
    fi
    
    # Verificar se está autenticado
    if ! gh auth status &> /dev/null; then
        echo -e "${YELLOW}🔐 Você precisa autenticar no GitHub${NC}"
        echo ""
        echo "Execute:"
        echo "  gh auth login"
        echo ""
        echo "Depois rode novamente: ./bagus publish"
        exit 1
    fi
    
    # Verificar se há pacotes
    if [ ! -d "${DIST_DIR}" ] || [ -z "$(ls -A ${DIST_DIR})" ]; then
        echo -e "${YELLOW}📦 Pacotes não encontrados, compilando...${NC}"
        cmd_build
    fi
    
    echo -e "${GREEN}✅ Pacotes prontos:${NC}"
    ls -lh ${DIST_DIR}/
    echo ""
    
    # Verificar se tag existe
    if ! git rev-parse ${CURRENT_VERSION} >/dev/null 2>&1; then
        echo -e "${RED}❌ Tag ${CURRENT_VERSION} não existe${NC}"
        echo "Execute primeiro: ./bagus release ${CURRENT_VERSION#v}"
        exit 1
    fi
    
    # Verificar se tag foi enviada
    if ! git ls-remote --tags origin | grep -q "refs/tags/${CURRENT_VERSION}"; then
        echo -e "${YELLOW}📤 Enviando tag para GitHub...${NC}"
        git push origin ${CURRENT_VERSION}
        echo ""
    fi
    
    # Verificar se release já existe
    if gh release view ${CURRENT_VERSION} &> /dev/null; then
        echo -e "${YELLOW}⚠️  Release ${CURRENT_VERSION} já existe${NC}"
        echo ""
        read -p "Deseja deletar e recriar? (s/N): " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Ss]$ ]]; then
            echo -e "${YELLOW}🗑️  Deletando release existente...${NC}"
            gh release delete ${CURRENT_VERSION} -y
        else
            echo "Cancelado."
            exit 0
        fi
    fi
    
    # Criar release notes
    RELEASE_NOTES=$(cat << EOF
Release ${CURRENT_VERSION}

## 📦 Instalação

### Debian/Ubuntu (.deb)
\`\`\`bash
wget https://github.com/peder1981/bagus-browser-go/releases/download/${CURRENT_VERSION}/bagus-browser_${CURRENT_VERSION}_amd64.deb
sudo dpkg -i bagus-browser_${CURRENT_VERSION}_amd64.deb
\`\`\`

### Linux Genérico (.tar.gz)
\`\`\`bash
wget https://github.com/peder1981/bagus-browser-go/releases/download/${CURRENT_VERSION}/bagus-browser_${CURRENT_VERSION}_linux_amd64.tar.gz
tar -xzf bagus-browser_${CURRENT_VERSION}_linux_amd64.tar.gz
sudo mv bagus-browser /usr/local/bin/
\`\`\`

## ✨ Novidades

Veja o CHANGELOG.md para detalhes completos.

## 🔐 Checksums (SHA256)

\`\`\`
$(cat ${DIST_DIR}/SHA256SUMS)
\`\`\`
EOF
)
    
    # Criar release
    echo -e "${YELLOW}📝 Criando release ${CURRENT_VERSION}...${NC}"
    
    gh release create ${CURRENT_VERSION} \
        --title "Bagus Browser ${CURRENT_VERSION}" \
        --notes "${RELEASE_NOTES}" \
        ${DIST_DIR}/*.deb \
        ${DIST_DIR}/*.tar.gz \
        ${DIST_DIR}/SHA256SUMS
    
    if [ $? -eq 0 ]; then
        echo ""
        echo -e "${GREEN}╔════════════════════════════════════════╗${NC}"
        echo -e "${GREEN}║   ✅ Release Publicada com Sucesso!   ║${NC}"
        echo -e "${GREEN}╚════════════════════════════════════════╝${NC}"
        echo ""
        echo -e "${CYAN}🔗 URL:${NC}"
        echo "   https://github.com/peder1981/bagus-browser-go/releases/tag/${CURRENT_VERSION}"
        echo ""
    else
        echo ""
        echo -e "${RED}❌ Erro ao criar release${NC}"
        echo ""
        echo "Tente publicar manualmente em:"
        echo "https://github.com/peder1981/bagus-browser-go/releases/new"
        exit 1
    fi
}

# Publicar automático
cmd_publish_auto() {
    cmd_publish
}

# Testar
cmd_test() {
    echo -e "${BLUE}🧪 Testando compilação...${NC}"
    check_dependencies
    
    go build -o /tmp/bagus-browser-test .
    rm /tmp/bagus-browser-test
    
    echo -e "${GREEN}✅ Teste OK!${NC}"
}

# Executar
cmd_run() {
    echo -e "${BLUE}🚀 Compilando e executando...${NC}"
    go build -o /tmp/bagus-browser-run .
    /tmp/bagus-browser-run "$@"
    rm /tmp/bagus-browser-run
}

# Status
cmd_status() {
    show_banner
    
    echo -e "${CYAN}📊 Status do Projeto${NC}"
    echo ""
    echo -e "${YELLOW}Versão:${NC} ${CURRENT_VERSION}"
    echo -e "${YELLOW}Branch:${NC} $(git branch --show-current)"
    echo -e "${YELLOW}Último commit:${NC} $(git log -1 --pretty=format:'%h - %s')"
    echo ""
    
    # Arquivos
    echo -e "${CYAN}📁 Arquivos:${NC}"
    echo "  Go: $(find . -name '*.go' | wc -l) arquivos"
    echo "  Linhas: $(find . -name '*.go' -exec wc -l {} + | tail -1 | awk '{print $1}')"
    echo ""
    
    # Git
    echo -e "${CYAN}📝 Git:${NC}"
    if git diff-index --quiet HEAD --; then
        echo -e "  ${GREEN}✅ Sem mudanças não commitadas${NC}"
    else
        echo -e "  ${YELLOW}⚠️  Há mudanças não commitadas${NC}"
    fi
    
    # Tags
    echo ""
    echo -e "${CYAN}🏷️  Últimas tags:${NC}"
    git tag -l 'v*' | sort -V | tail -5
    echo ""
}

# Changelog
cmd_changelog() {
    if [ -f "CHANGELOG.md" ]; then
        less CHANGELOG.md
    else
        echo -e "${YELLOW}⚠️  CHANGELOG.md não encontrado${NC}"
    fi
}

# Main
main() {
    case "${1:-help}" in
        build)
            cmd_build
            ;;
        install)
            cmd_install
            ;;
        clean)
            cmd_clean
            ;;
        version)
            cmd_version
            ;;
        release)
            cmd_release "$2"
            ;;
        publish)
            cmd_publish
            ;;
        publish-auto)
            cmd_publish_auto
            ;;
        test)
            cmd_test
            ;;
        run)
            shift
            cmd_run "$@"
            ;;
        status)
            cmd_status
            ;;
        changelog)
            cmd_changelog
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            echo -e "${RED}❌ Comando desconhecido: $1${NC}"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

main "$@"

#!/bin/bash
# Script para gerenciar vers√µes do Bagus Browser

set -e

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o para exibir uso
usage() {
    echo "Uso: $0 [comando] [vers√£o]"
    echo ""
    echo "Comandos:"
    echo "  current              - Mostra vers√£o atual"
    echo "  update <vers√£o>      - Atualiza para nova vers√£o (ex: 4.4.0)"
    echo "  release <vers√£o>     - Cria release completa (build + tag + docs)"
    echo ""
    echo "Exemplos:"
    echo "  $0 current"
    echo "  $0 update 4.4.0"
    echo "  $0 release 4.4.0"
    exit 1
}

# Fun√ß√£o para obter vers√£o atual
get_current_version() {
    # Pegar a tag mais recente (ordenada por vers√£o)
    git tag -l 'v*' | sort -V | tail -1 | sed 's/^v//' || echo "4.4.0"
}

# Fun√ß√£o para atualizar CHANGELOG
update_changelog() {
    local version=$1
    local date=$(date +%Y-%m-%d)
    
    echo -e "${YELLOW}üìù Atualizando CHANGELOG.md...${NC}"
    
    # Verificar se j√° existe entrada para esta vers√£o
    if grep -q "## \[$version\]" CHANGELOG.md; then
        echo -e "${GREEN}‚úÖ CHANGELOG j√° cont√©m vers√£o $version${NC}"
    else
        echo -e "${RED}‚ö†Ô∏è  Adicione manualmente as mudan√ßas no CHANGELOG.md${NC}"
        echo -e "${YELLOW}   Formato: ## [$version] - $date${NC}"
    fi
}

# Fun√ß√£o para criar release notes
create_release_notes() {
    local version=$1
    local notes_file="docs/releases/RELEASE_NOTES_v${version}.md"
    
    echo -e "${YELLOW}üìù Criando release notes...${NC}"
    
    if [ -f "$notes_file" ]; then
        echo -e "${GREEN}‚úÖ Release notes j√° existem: $notes_file${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Criando template de release notes...${NC}"
        mkdir -p docs/releases
        
        cat > "$notes_file" << EOF
# Bagus Browser v${version}

## üéâ Release

Browser minimalista, seguro e privado constru√≠do em Go.

### ‚ú® Features

- üåê WebView completo (WebKit2GTK)
- üìè M√∫ltiplas abas independentes
- üìù Menu superior completo
- üîç Buscar na p√°gina
- ‚≠ê Favoritos criptografados
- üîÑ Restaura√ß√£o de sess√£o
- üñ®Ô∏è Impress√£o (PDF e impressoras)
- ‚å®Ô∏è  30 atalhos de teclado

### üîí Seguran√ßa

- AES-256-GCM para favoritos e sess√µes
- PBKDF2 (100,000 itera√ß√µes)
- Valida√ß√£o rigorosa de URLs
- WebView hardened

### üïµÔ∏è Privacidade

- **Zero telemetria** (garantido)
- Third-party cookies bloqueados
- WebGL/WebAudio bloqueados (anti-fingerprinting)
- Dados criptografados localmente

### üìä Estat√≠sticas

- **Tamanho:** 6.4MB
- **Atalhos:** 30
- **Plataforma:** Linux only
- **Licen√ßa:** MIT

### üì¶ Instala√ß√£o

#### Ubuntu/Debian (.deb)
\`\`\`bash
wget https://github.com/peder1981/bagus-browser-go/releases/download/v${version}/bagus-browser_${version}_amd64.deb
sudo dpkg -i bagus-browser_${version}_amd64.deb
sudo apt-get install -f
\`\`\`

#### Tarball
\`\`\`bash
wget https://github.com/peder1981/bagus-browser-go/releases/download/v${version}/bagus-browser_${version}_linux_amd64.tar.gz
tar -xzf bagus-browser_${version}_linux_amd64.tar.gz
sudo mv bagus-browser /usr/local/bin/
\`\`\`

### üîó Links

- **C√≥digo:** https://github.com/peder1981/bagus-browser-go
- **Issues:** https://github.com/peder1981/bagus-browser-go/issues
- **Documenta√ß√£o:** https://github.com/peder1981/bagus-browser-go/tree/main/docs

---

**Data:** $(date +%Y-%m-%d)  
**Vers√£o:** ${version}
EOF
        
        echo -e "${GREEN}‚úÖ Release notes criadas: $notes_file${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Edite o arquivo para adicionar detalhes espec√≠ficos${NC}"
    fi
}

# Fun√ß√£o para limpar arquivos tempor√°rios
cleanup_temp_files() {
    echo -e "${YELLOW}üßπ Limpando arquivos tempor√°rios...${NC}"
    
    # Remover builds antigos (manter apenas dist/)
    if [ -d "build" ]; then
        rm -rf build
        echo -e "${GREEN}‚úÖ Removido: build/${NC}"
    fi
    
    # Limpar arquivos de log tempor√°rios
    find . -name "*.log" -type f -delete 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Limpeza conclu√≠da${NC}"
}

# Fun√ß√£o para criar release completa
create_release() {
    local version=$1
    
    echo -e "${BLUE}üöÄ Criando release v${version}${NC}"
    echo -e "${BLUE}=========================================${NC}"
    echo ""
    
    # 1. Atualizar CHANGELOG
    update_changelog "$version"
    
    # 2. Criar release notes
    create_release_notes "$version"
    
    # 3. Commit mudan√ßas
    echo -e "${YELLOW}üìù Commitando mudan√ßas...${NC}"
    git add CHANGELOG.md docs/releases/
    git commit -m "üìù Preparar release v${version}" || echo "Nada para commitar"
    
    # 4. Criar tag
    echo -e "${YELLOW}üè∑Ô∏è  Criando tag v${version}...${NC}"
    if git tag -l | grep -q "^v${version}$"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Tag v${version} j√° existe${NC}"
    else
        git tag -a "v${version}" -m "Release v${version}"
        echo -e "${GREEN}‚úÖ Tag v${version} criada${NC}"
    fi
    
    # 5. Build
    echo -e "${YELLOW}üî® Compilando...${NC}"
    bash scripts/build.sh
    
    # 6. Limpar tempor√°rios
    cleanup_temp_files
    
    # 7. Push
    echo -e "${YELLOW}üì§ Enviando para GitHub...${NC}"
    git push origin main
    git push origin "v${version}"
    
    echo ""
    echo -e "${GREEN}=========================================${NC}"
    echo -e "${GREEN}‚úÖ Release v${version} criada com sucesso!${NC}"
    echo -e "${GREEN}=========================================${NC}"
    echo ""
    echo -e "${BLUE}üìã Pr√≥ximos passos:${NC}"
    echo -e "1. Acesse: ${YELLOW}https://github.com/peder1981/bagus-browser-go/releases/new${NC}"
    echo -e "2. Selecione tag: ${YELLOW}v${version}${NC}"
    echo -e "3. Copie conte√∫do de: ${YELLOW}docs/releases/RELEASE_NOTES_v${version}.md${NC}"
    echo -e "4. Fa√ßa upload dos arquivos de: ${YELLOW}dist/${NC}"
    echo -e "5. Publique a release"
    echo ""
}

# Main
case "$1" in
    current)
        version=$(get_current_version)
        echo -e "${GREEN}Vers√£o atual: v${version}${NC}"
        ;;
    update)
        if [ -z "$2" ]; then
            echo -e "${RED}‚ùå Erro: Especifique a vers√£o${NC}"
            usage
        fi
        update_changelog "$2"
        ;;
    release)
        if [ -z "$2" ]; then
            echo -e "${RED}‚ùå Erro: Especifique a vers√£o${NC}"
            usage
        fi
        create_release "$2"
        ;;
    *)
        usage
        ;;
esac
